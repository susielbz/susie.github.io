
vue调用摄像头拍照/上传图片，识别二维码功能
这个功能我本来是用navigator.getUserMedia去实现的，
当已经完成之后发现，不能支持苹果手机，以及安卓手机端也不行
查阅资料发现，
1.不支持ios；2.需要在https下
因此做了两种方案，
1.安卓手机和pc端用getUserMedia
2.苹果手机用比较low的拍照和上传图片去实现

目前未知由于未上生产，所以方案1-安卓手机页面不行的问题还没有落实，有待验证
ios和安卓在方案2中均可以正常使用

图片压缩和旋转参考
https://www.jianshu.com/p/6fbf0f7fe246

安装相关插件
npm install exif-js --save
npm install qrcode-reader --save

代码：

@/api/api.js
=============
// 解析二维码（接口）
export const scan2Code = p => post('./TokenMng/toQRCode', p)


-----------------------------------------------------------------------------------------------------------------------------------

scanScope.vue
=============
<template>
  <div>
    <div v-show="pcShow">
      <!-- 内容部分 -->
      <video id="qr-video" class="v" autoplay></video>
      <div class="btnBox">
        <mt-button type="default" size="large" class="warning" @click.native="cutImg">开始扫描</mt-button>
      </div>
      <canvas
        id="qr-canvas"
        width="320"
        height="240"
        style="width: 320px; height: 240px;display:none;"
      ></canvas>
      <div id="imgBox"></div>
      <p>{{result}}</p>
      <p v-show="errorMes != ''">{{errorMes}}</p>
    </div>
    <div v-show="!pcShow">
      <div style="padding:20px;">
        <div class="show">
          <div class="picture" :style="'backgroundImage:url('+headerImage+')'"></div>
        </div>
        <div style="margin-top:20px;">
          <input type="file" id="upload" accept="image/*" @change="upload" />
          <label for="upload"></label>
        </div>
        <div class="btnBox">
          <mt-button type="default" size="large" class="warning" @click.native="getImg">识别二维码</mt-button>
        </div>
        <div class="contentText">
          <p>识别结果:</p>
          <div>{{resultInfo}}</div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import { MessageBox } from 'mint-ui'
import { scan2Code } from '@/api/api.js' // 导入api接口
import { EXIF } from 'exif-js'
import QrCode from 'qrcode-reader'
export default {
  props: {
    //
  },
  data () {
    return {
      headerImage: '',
      picValue: '',
      resultInfo: '',
      pcShow: true,
      video: '',
      canvas: '',
      context: '',
      stopScan: null,
      errorMes: '',
      result: '123',
      qr: null,
      front: false,
      imageType: 'png'
    }
  },
  mounted () {
    // 判断是ios还是安卓
    // 判断访问终端
    // 判断访问终端
    var browser = {
      versions: (function () {
        var u = navigator.userAgent
        var app = navigator.appVersion
        return {
          trident: u.indexOf('Trident') > -1, // IE内核
          presto: u.indexOf('Presto') > -1, // opera内核
          webKit: u.indexOf('AppleWebKit') > -1, // 苹果、谷歌内核
          gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') === -1, // 火狐内核
          mobile: !!u.match(/AppleWebKit.*Mobile.*/), // 是否为移动终端
          ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), // ios终端
          android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, // android终端或者uc浏览器
          iPhone: u.indexOf('iPhone') > -1, // 是否为iPhone或者QQHD浏览器
          iPad: u.indexOf('iPad') > -1, // 是否iPad
          webApp: u.indexOf('Safari') === -1, // 是否web应该程序，没有头部与底部
          weixin: u.indexOf('MicroMessenger') > -1, // 是否微信 （2015-01-22新增）
          qq: u.match(/\sQQ/i) == ' qq' // 是否QQ
        }
      })(),
      language: (navigator.browserLanguage || navigator.language).toLowerCase()
    }
    // 判断是否移动端
    if (
      browser.versions.mobile ||
      browser.versions.android ||
      browser.versions.ios
    ) {
      if (browser.versions.android) {
        // alert('移动端--android')
        this.pcShow = false
      } else if (browser.versions.ios) {
        this.pcShow = false
        // alert('移动端--ios')
      } else {
        // alert('移动端--other')
        this.pcShow = false
      }
    } else {
      this.pcShow = true
      // alert('pc端')
    }
    // 异步让加载的原因是 尝试着是否可以调起后置
    let that = this
    setTimeout(function () {
      that.getMedia()
    }, 1000)
  },
  methods: {
    // 开始扫描按钮
    cutImg () {
      this.scan()
    },
    getMedia () {
      window.URL =
        window.URL || window.webkitURL || window.mozURL || window.msURL
      navigator.getUserMedia =
        navigator.getUserMedia ||
        navigator.webkitGetUserMedia ||
        navigator.mozGetUserMedia ||
        navigator.msGetUserMedia
      this.video = document.getElementById('qr-video')
      this.canvas = document.getElementById('qr-canvas')
      this.context = this.canvas.getContext('2d')
      this.qr = new QrCode()
      // Call the getUserMedia method with our callback functions
      var config = {
        video: {
          facingMode: this.front ? 'user' : 'environment' // user:前置 environment:后置
        },
        audio: false // 不需要调用麦克风
      }
      var _that = this
      var promise = navigator.mediaDevices.getUserMedia(config) // 返回的 promise 没有 resolve reject
      promise.then(function (stream) {
        if (stream.active) {
          _that.video.srcObject = stream
          _that.video.play()
        } else {
          this.getMedia()
        }
      })
      // qrcode.callback返回的imgMsg就是decode方法解析图片后获取的信息！
      this.qr.callback = function (error, res) {
        if (error) {
          console.log(error)
          return
        }
        console.log(res)
        _that.result = res.result
        if (window.localMediaStream && window.localMediaStream.stop) {
          window.localMediaStream.stop()
        }
        if (_that.stopScan) {
          clearInterval(_that.stopScan)
        }
      }
    },
    // 画面转 canvas
    scan () {
      this.context.drawImage(this.video, 0, 0, 320, 240)
      // let canvasData = this.context.getImageData(0, 0, 100, 100) //
      let canvasData = this.canvas.toDataURL('image/png') // 可以吧图片变成64位
      scan2Code({
        QRImage: canvasData,
        imageType: this.imageType
      }).then(res => {
        if (res.dealCode === '000000') {
        } else {
          MessageBox.alert(res.dealMsg)
        }
      })
      try {
        // 使用 qrcode.decode() 对 canvas 进行解码.
        this.qr.decode(canvasData)
      } catch (e) {
        console.log('decode has error')
        // setTimeout(this.scan, 500)
      }
    },
    getImg () {
      this.scanIos()
    },
    // 画面转 canvas
    scanIos () {
      // alert(this.headerImage)
      // alert(this.imageType)
      var _that = this
      scan2Code({
        QRImage: this.headerImage,
        imageType: this.imageType
      }).then(res => {
        // alert(res.dealCode)
        if (res.dealCode === '000000') {
          _that.resultInfo = res.QRInfos
        } else {
          MessageBox.alert(res.dealMsg)
        }
      })
      //   try {
      //     // 使用 qrcode.decode() 对 canvas 进行解码.
      //     this.qr.decode(_that.headerImage)
      //   } catch (e) {
      //     console.log('decode has error')
      //     // setTimeout(this.scan, 500)
      //   }
      // let canvasData = this.context.getImageData(0, 0, 100, 100) //
      // let canvasData = this.picValue.toDataURL('image/png') // 可以吧图片变成64位
    },
    // getIosMedia () {
    //   this.qr = new QrCode()
    //   // qrcode.callback返回的imgMsg就是decode方法解析图片后获取的信息
    //   this.qr.callback = function (error, res) {
    //     if (error) {
    //       console.log(error)
    //       return
    //     }
    //     console.log(res)
    //   }
    // },
    upload (e) {
      let files = e.target.files || e.dataTransfer.files
      if (!files.length) return
      this.picValue = files[0]
      this.imageType = files[0].type.split('/')[1]
      // this.headerImage = URL.createObjectURL(this.picValue)
      this.imgPreview(this.picValue)
    },
    rotateImg (img, direction, canvas) {
      // 最小与最大旋转方向，图片旋转4次后回到原方向
      const min_step = 0
      const max_step = 3
      if (img == null) return
      // img的高度和宽度不能在img元素隐藏后获取，否则会出错
      let height = img.height
      let width = img.width
      let step = 2
      if (step == null) {
        step = min_step
      }
      if (direction == 'right') {
        step++
        // 旋转到原位置，即超过最大值
        step > max_step && (step = min_step)
      } else {
        step--
        step < min_step && (step = max_step)
      }
      // 旋转角度以弧度值为参数
      let degree = (step * 90 * Math.PI) / 180
      let ctx = canvas.getContext('2d')
      switch (step) {
        case 0:
          canvas.width = width
          canvas.height = height
          ctx.drawImage(img, 0, 0)
          break
        case 1:
          canvas.width = height
          canvas.height = width
          ctx.rotate(degree)
          ctx.drawImage(img, 0, -height)
          break
        case 2:
          canvas.width = width
          canvas.height = height
          ctx.rotate(degree)
          ctx.drawImage(img, -width, -height)
          break
        case 3:
          canvas.width = height
          canvas.height = width
          ctx.rotate(degree)
          ctx.drawImage(img, -width, 0)
          break
      }
    },
    imgPreview (file) {
      let self = this
      let Orientation
      // 去获取拍照时的信息，解决拍出来的照片旋转问题
      console.log(EXIF)
      EXIF.getData(file, function () {
        Orientation = EXIF.getTag(this, 'Orientation')
      })
      // 看支持不支持FileReader
      if (!file || !window.FileReader) return
      if (/^image/.test(file.type)) {
        // 创建一个reader
        let reader = new FileReader()
        // 将图片2将转成 base64 格式
        reader.readAsDataURL(file)
        // 读取成功后的回调
        reader.onloadend = function () {
          let result = this.result
          let img = new Image()
          img.src = result
          // 判断图片是否大于100K,是就直接上传，反之压缩图片
          if (this.result.length <= 100 * 1024) {
            self.headerImage = this.result
            // self.postImg()
          } else {
            img.onload = function () {
              let data = self.compress(img, Orientation)
              self.headerImage = data
              // self.postImg()
            }
          }
        }
      }
    },
    compress (img, Orientation) {
      let canvas = document.createElement('canvas')
      let ctx = canvas.getContext('2d')
      // 瓦片canvas
      let tCanvas = document.createElement('canvas')
      let tctx = tCanvas.getContext('2d')
      let initSize = img.src.length
      let width = img.width
      let height = img.height
      // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      let ratio
      if ((ratio = (width * height) / 4000000) > 1) {
        console.log('大于400万像素')
        ratio = Math.sqrt(ratio)
        width /= ratio
        height /= ratio
      } else {
        ratio = 1
      }
      canvas.width = width
      canvas.height = height
      //        铺底色
      ctx.fillStyle = '#fff'
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      // 如果图片像素大于100万则使用瓦片绘制
      let count
      if ((count = (width * height) / 1000000) > 1) {
        console.log('超过100W像素')
        count = ~~(Math.sqrt(count) + 1) // 计算要分成多少块瓦片
        // 计算每块瓦片的宽和高
        let nw = ~~(width / count)
        let nh = ~~(height / count)
        tCanvas.width = nw
        tCanvas.height = nh
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < count; j++) {
            tctx.drawImage(
              img,
              i * nw * ratio,
              j * nh * ratio,
              nw * ratio,
              nh * ratio,
              0,
              0,
              nw,
              nh
            )
            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh)
          }
        }
      } else {
        ctx.drawImage(img, 0, 0, width, height)
      }
      // 修复ios上传图片的时候 被旋转的问题
      if (Orientation !== '' && Orientation !== 1) {
        switch (Orientation) {
          case 6: // 需要顺时针（向左）90度旋转
            this.rotateImg(img, 'left', canvas)
            break
          case 8: // 需要逆时针（向右）90度旋转
            this.rotateImg(img, 'right', canvas)
            break
          case 3: // 需要180度旋转
            this.rotateImg(img, 'right', canvas) // 转两次
            this.rotateImg(img, 'right', canvas)
            break
        }
      }
      // 进行最小压缩
      let ndata = canvas.toDataURL('image/jpeg', 0.1)
      // let ndata = canvas.toDataURL('image/png')
      console.log('压缩前：' + initSize)
      console.log('压缩后：' + ndata.length)
      console.log(
        '压缩率：' + ~~((100 * (initSize - ndata.length)) / initSize) + '%'
      )
      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0
      return ndata
    }
  }
}
</script>

<style lang="stylus" scoped>
.v {
  width: 320px;
  height: 240px;
  margin: 30px auto;
}

#qr-canvas {
  width: 320px;
  height: 240px;
}

.btnBox {
  width: 100%;
  padding: 0 3.125rem;
  box-sizing: border-box;
  margin-top: 3rem;
}

.contentText {
  margin-top: 1.875rem;

  p {
    margin-bottom:1.25rem
  }

  div {
    padding: 0.3125rem;
    word-break: break-all;
    text-align: left;
  }
}

.show {
  width: 9.375rem;
  height: 9.375rem;
  margin: 0 auto;
  overflow: hidden;
  position: relative;
  border: 1px solid #d5d5d5;
}

.picture {
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
}
</style>
